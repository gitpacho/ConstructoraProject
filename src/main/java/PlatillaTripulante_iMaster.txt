/*
 * Pueda usar esta plantilla para la carga del reto a iMaster
 * Copie las clases de los paquetes Modelo, Vista, Controlador y Util
 * No incluya los import de los archivos .java solo las clases
 */
// Importaciones necesarias en iMaster
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Remplace en adelante por las clases de sus archivos .java

// Vista
class VistaRequerimientos {}

// Controlador
class ControladorRequerimientos {}

// Modelo
// VO
class Requerimiento_1 {}

class Requerimiento_2 {}

class Requerimiento_3 {}

// DAO
class Requerimiento_1Dao {}

class Requerimiento_2Dao {}

class Requerimiento_3Dao {}




--------------------------------------------------------------------------------- SCRIPT SUBIDO A iMaster
--------------------------------------------------------------------------------- SCRIPT SUBIDO A iMaster
--------------------------------------------------------------------------------- SCRIPT SUBIDO A iMaster
--------------------------------------------------------------------------------- SCRIPT SUBIDO A iMaster
--------------------------------------------------------------------------------- SCRIPT SUBIDO A iMaster
--------------------------------------------------------------------------------- SCRIPT SUBIDO A iMaster
--------------------------------------------------------------------------------- SCRIPT SUBIDO A iMaster



import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

//-----------------------------------------------

public class Requerimiento_1Dao {
    public String sql = "SELECT ID_Lider , Salario , Ciudad_Residencia FROM Lider l WHERE Salario > (SELECT MIN(Salario) FROM Lider l2) AND Ciudad_Residencia = 'Barranquilla' ORDER BY Salario ;";
    public ArrayList<Requerimiento_1Vo> resultado = new ArrayList<Requerimiento_1Vo>();

    public ArrayList<Requerimiento_1Vo> requerimiento1() throws SQLException {
        try {
            Connection conexion = JDBCUtilities.getConnection();
            Statement stmt = conexion.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()){
                Requerimiento_1Vo lider = new Requerimiento_1Vo();
                lider.setID_Lider(rs.getInt("ID_Lider"));
                lider.setSalario(rs.getInt("Salario"));
                lider.setCiudad_Residencia(rs.getString("Ciudad_Residencia"));
                resultado.add(lider);
            }

        } catch (Exception e) {
            System.out.println("Error en requerimiento 1" + e.getMessage());
        } 
        return resultado;
    }
}

public class Requerimiento_2Dao {
    public String sql = "SELECT c.ID_Proyecto, mc.Nombre_Material , mc.Importado FROM Compra c JOIN MaterialConstruccion mc ON (c.ID_MaterialConstruccion = mc.ID_MaterialConstruccion) WHERE c.ID_Proyecto in (1,184,400) ORDER BY c.ID_Proyecto ;";
    public ArrayList<Requerimiento_2Vo> resultado = new ArrayList<Requerimiento_2Vo>();

    public ArrayList<Requerimiento_2Vo> requerimiento2() throws SQLException {
        try {
            Connection conexion = JDBCUtilities.getConnection();
            Statement stmt = conexion.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()){
                Requerimiento_2Vo Material = new Requerimiento_2Vo();
                Material.setID_Proyecto(rs.getInt("ID_Proyecto"));
                Material.setNombre_Material(rs.getString("Nombre_Material"));
                Material.setImportado(rs.getString("Importado"));
                resultado.add(Material);
            }

        } catch (Exception e) {
            System.out.println("Error en requerimiento 2" + e.getMessage());
        } 
        return resultado;
}
}


public class Requerimiento_3Dao {
        public String sql = "SELECT c.ID_Proyecto , c.Proveedor FROM Compra c WHERE c.ID_Proyecto BETWEEN 120 AND 124 ORDER  BY c.ID_Proyecto ;";
        public ArrayList<Requerimiento_3Vo> resultado = new ArrayList<Requerimiento_3Vo>();

        public ArrayList<Requerimiento_3Vo> requerimiento3() throws SQLException {
            try {
                Connection conexion = JDBCUtilities.getConnection();
                Statement stmt = conexion.createStatement();
                ResultSet rs = stmt.executeQuery(sql);

                while (rs.next()){
                    Requerimiento_3Vo Proveedor = new Requerimiento_3Vo();
                    Proveedor.setID_Proyecto(rs.getInt("ID_Proyecto"));
                    Proveedor.setProveedor(rs.getString("Proveedor"));
                    resultado.add(Proveedor);
                }

            } catch (Exception e) {
                System.out.println("Error en requerimiento 3" + e.getMessage());
            } 
            return resultado;
            
    }
}


public class Requerimiento_1Vo {
    private Integer ID_Lider;
    private Integer Salario;
    private String Ciudad_Residencia;
    public Integer getID_Lider() {
        return ID_Lider;
    }
    public void setID_Lider(Integer iD_Lider) {
        ID_Lider = iD_Lider;
    }
    public Integer getSalario() {
        return Salario;
    }
    public void setSalario(Integer salario) {
        Salario = salario;
    }
    public String getCiudad_Residencia() {
        return Ciudad_Residencia;
    }
    public void setCiudad_Residencia(String ciudad_Residencia) {
        Ciudad_Residencia = ciudad_Residencia;
    }
    
}


public class Requerimiento_2Vo {
    private Integer ID_Proyecto;
    private String Nombre_Material;
    private String Importado;
    public Integer getID_Proyecto() {
        return ID_Proyecto;
    }
    public void setID_Proyecto(Integer iD_Proyecto) {
        ID_Proyecto = iD_Proyecto;
    }
    public String getNombre_Material() {
        return Nombre_Material;
    }
    public void setNombre_Material(String nombre_Material) {
        Nombre_Material = nombre_Material;
    }
    public String getImportado() {
        return Importado;
    }
    public void setImportado(String importado) {
        Importado = importado;
    }    
}


public class Requerimiento_3Vo {
    private Integer ID_Proyecto;
    private String Proveedor;
    
    public Integer getID_Proyecto() {
        return ID_Proyecto;
    }
    public void setID_Proyecto(Integer iD_Proyecto) {
        ID_Proyecto = iD_Proyecto;
    }
    public String getProveedor() {
        return Proveedor;
    }
    public void setProveedor(String proveedor) {
        Proveedor = proveedor;
    }   
}

//-----------------------------------
public class VistaRequerimientos {
    public static Requerimiento_1Dao dao = new Requerimiento_1Dao();
    public static Requerimiento_2Dao dao2 = new Requerimiento_2Dao();
    public static Requerimiento_3Dao dao3 = new Requerimiento_3Dao();

    public static final ControladorRequerimientos controlador = new ControladorRequerimientos();

    public static void requerimiento1() {
        try {
            ArrayList<Requerimiento_1Vo> lista = controlador.consultarRequerimiento1();
            for (Requerimiento_1Vo requerimiento_1Vo : lista) {
                System.out.println(requerimiento_1Vo.getID_Lider() + " "+ requerimiento_1Vo.getSalario() + " " +requerimiento_1Vo.getCiudad_Residencia());
            }
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento2() {
        try {
            ArrayList<Requerimiento_2Vo> lista = controlador.consultarRequerimiento2();
            for (Requerimiento_2Vo requerimiento_2Vo : lista) {
                System.out.println(requerimiento_2Vo.getID_Proyecto() + " "+ requerimiento_2Vo.getNombre_Material() + " " +requerimiento_2Vo.getImportado());
            }
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento3() {
        try {
            ArrayList<Requerimiento_3Vo> lista = controlador.consultarRequerimiento3();
            for (Requerimiento_3Vo requerimiento_3Vo : lista) {
                System.out.println(requerimiento_3Vo.getID_Proyecto() + " " + requerimiento_3Vo.getProveedor() );
            }
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }
}


//----------------------------------------------------

public class ControladorRequerimientos {
    public static Requerimiento_1Dao dao = new Requerimiento_1Dao();
    public static Requerimiento_2Dao dao2 = new Requerimiento_2Dao();
    public static Requerimiento_3Dao dao3 = new Requerimiento_3Dao();

    public ArrayList<Requerimiento_1Vo> consultarRequerimiento1() throws SQLException {
        ArrayList<Requerimiento_1Vo> lista = null;
        try {
            lista = dao.requerimiento1();
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
        return lista;
    }

    public ArrayList<Requerimiento_2Vo> consultarRequerimiento2() throws SQLException {
        ArrayList<Requerimiento_2Vo> lista = null;
        try {
            lista = dao2.requerimiento2();
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
        return lista;
    }

    public ArrayList<Requerimiento_3Vo> consultarRequerimiento3() throws SQLException {
        ArrayList<Requerimiento_3Vo> lista = null;
        try {
            lista = dao3.requerimiento3();
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
        return lista;
    }
}


//------------------------------------------------

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}
